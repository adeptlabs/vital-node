/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vital from "../../api";
import * as core from "../../core";

export const ClientFacingAppointment: core.serialization.ObjectSchema<
    serializers.ClientFacingAppointment.Raw,
    Vital.ClientFacingAppointment
> = core.serialization.object({
    id: core.serialization.string(),
    userId: core.serialization.property("user_id", core.serialization.string()),
    orderId: core.serialization.property("order_id", core.serialization.string()),
    address: core.serialization.lazyObject(async () => (await import("..")).UsAddress),
    location: core.serialization.lazyObject(async () => (await import("..")).LngLat),
    startAt: core.serialization.property("start_at", core.serialization.date()),
    endAt: core.serialization.property("end_at", core.serialization.date()),
    ianaTimezone: core.serialization.property("iana_timezone", core.serialization.string()),
    type: core.serialization.lazy(async () => (await import("..")).AppointmentType),
    provider: core.serialization.lazy(async () => (await import("..")).AppointmentProvider),
    status: core.serialization.lazy(async () => (await import("..")).AppointmentStatus),
    providerId: core.serialization.property("provider_id", core.serialization.string()),
    canReschedule: core.serialization.property("can_reschedule", core.serialization.boolean()),
    eventStatus: core.serialization.property(
        "event_status",
        core.serialization.lazy(async () => (await import("..")).AppointmentEventStatus)
    ),
    eventData: core.serialization.property(
        "event_data",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    events: core.serialization.list(
        core.serialization.lazyObject(async () => (await import("..")).ClientFacingAppointmentEvent)
    ),
});

export declare namespace ClientFacingAppointment {
    interface Raw {
        id: string;
        user_id: string;
        order_id: string;
        address: serializers.UsAddress.Raw;
        location: serializers.LngLat.Raw;
        start_at: string;
        end_at: string;
        iana_timezone: string;
        type: serializers.AppointmentType.Raw;
        provider: serializers.AppointmentProvider.Raw;
        status: serializers.AppointmentStatus.Raw;
        provider_id: string;
        can_reschedule: boolean;
        event_status: serializers.AppointmentEventStatus.Raw;
        event_data?: Record<string, unknown> | null;
        events: serializers.ClientFacingAppointmentEvent.Raw[];
    }
}
