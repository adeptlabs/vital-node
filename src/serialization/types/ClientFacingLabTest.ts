/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vital from "../../api";
import * as core from "../../core";

export const ClientFacingLabTest: core.serialization.ObjectSchema<
    serializers.ClientFacingLabTest.Raw,
    Vital.ClientFacingLabTest
> = core.serialization.object({
    id: core.serialization.string(),
    slug: core.serialization.string(),
    name: core.serialization.string(),
    sampleType: core.serialization.property(
        "sample_type",
        core.serialization.lazy(async () => (await import("..")).LabTestSampleType)
    ),
    method: core.serialization.lazy(async () => (await import("..")).LabTestCollectionMethod),
    price: core.serialization.number(),
    isActive: core.serialization.property("is_active", core.serialization.boolean()),
    status: core.serialization.lazy(async () => (await import("..")).LabTestStatus),
    fasting: core.serialization.boolean().optional(),
    lab: core.serialization.lazyObject(async () => (await import("..")).ClientFacingLab).optional(),
    markers: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("..")).ClientFacingMarker))
        .optional(),
    isDelegated: core.serialization.property("is_delegated", core.serialization.boolean().optional()),
});

export declare namespace ClientFacingLabTest {
    interface Raw {
        id: string;
        slug: string;
        name: string;
        sample_type: serializers.LabTestSampleType.Raw;
        method: serializers.LabTestCollectionMethod.Raw;
        price: number;
        is_active: boolean;
        status: serializers.LabTestStatus.Raw;
        fasting?: boolean | null;
        lab?: serializers.ClientFacingLab.Raw | null;
        markers?: serializers.ClientFacingMarker.Raw[] | null;
        is_delegated?: boolean | null;
    }
}
