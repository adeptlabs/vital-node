/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "..";
import * as Vital from "../../api";
import * as core from "../../core";

export const ClientFacingLab: core.serialization.ObjectSchema<serializers.ClientFacingLab.Raw, Vital.ClientFacingLab> =
    core.serialization.object({
        id: core.serialization.number(),
        slug: core.serialization.string(),
        name: core.serialization.string(),
        firstLineAddress: core.serialization.property("first_line_address", core.serialization.string()),
        city: core.serialization.string(),
        zipcode: core.serialization.string(),
        collectionMethods: core.serialization.property(
            "collection_methods",
            core.serialization.list(core.serialization.lazy(async () => (await import("..")).LabTestCollectionMethod))
        ),
        sampleTypes: core.serialization.property(
            "sample_types",
            core.serialization.list(core.serialization.lazy(async () => (await import("..")).LabTestSampleType))
        ),
    });

export declare namespace ClientFacingLab {
    interface Raw {
        id: number;
        slug: string;
        name: string;
        first_line_address: string;
        city: string;
        zipcode: string;
        collection_methods: serializers.LabTestCollectionMethod.Raw[];
        sample_types: serializers.LabTestSampleType.Raw[];
    }
}
