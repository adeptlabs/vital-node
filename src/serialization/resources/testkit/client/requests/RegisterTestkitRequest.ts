/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Vital from "../../../../../api";
import * as core from "../../../../../core";

export const RegisterTestkitRequest: core.serialization.Schema<
    serializers.RegisterTestkitRequest.Raw,
    Vital.RegisterTestkitRequest
> = core.serialization.object({
    userId: core.serialization.property("user_id", core.serialization.string()),
    sampleId: core.serialization.property("sample_id", core.serialization.string()),
    patientDetails: core.serialization.property(
        "patient_details",
        core.serialization.lazyObject(async () => (await import("../../../..")).PatientDetails)
    ),
    patientAddress: core.serialization.property(
        "patient_address",
        core.serialization.lazyObject(async () => (await import("../../../..")).PatientAddressCompatible)
    ),
    physician: core.serialization
        .lazyObject(async () => (await import("../../../..")).PhysicianCreateRequestBase)
        .optional(),
    consents: core.serialization
        .list(core.serialization.lazyObject(async () => (await import("../../../..")).Consent))
        .optional(),
});

export declare namespace RegisterTestkitRequest {
    interface Raw {
        user_id: string;
        sample_id: string;
        patient_details: serializers.PatientDetails.Raw;
        patient_address: serializers.PatientAddressCompatible.Raw;
        physician?: serializers.PhysicianCreateRequestBase.Raw | null;
        consents?: serializers.Consent.Raw[] | null;
    }
}
